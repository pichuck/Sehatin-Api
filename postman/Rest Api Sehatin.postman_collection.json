{
	"info": {
		"_postman_id": "0d960598-c4fb-4d28-9eee-2849dd4652d2",
		"name": "Rest Api Sehatin",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Scripts\" tab**\n\nAdding tests to your requests can help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/fa30ea0a-373d-4545-a668-e7b283cca343/aW1hZ2UucG5n\" alt=\"\" height=\"1530\" width=\"2162\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n    \n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "39182041",
		"_collection_link": "https://buku-api.postman.co/workspace/buku-api~2eb16f9a-cc94-4d98-8230-0e17427f5a8a/collection/39182041-0d960598-c4fb-4d28-9eee-2849dd4652d2?action=share&source=collection_link&creator=39182041"
	},
	"item": [
		{
			"name": "Register",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"name\": \"Rend\",\n    \"email\": \"rend@gmail.com\",\n    \"password\":\"rend1234\",\n   \"password_confirmation\": \"rend1234\",\n    \"no_hp\": \"1223332112\",\n    \"jenis_kelamin\": \"laki-laki\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://127.0.0.1:8000/api/register",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"api",
						"register"
					]
				},
				"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
			},
			"response": []
		},
		{
			"name": "Login",
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:8000/api/login",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Logout",
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:8000/api/logout",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"api",
						"logout"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All User",
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://127.0.0.1:8000/api/users",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Artikel",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "2|u7gHcgeubrXHG5DvpLNfdiG0AePT2yrsP67kcBdv15616e2f",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "judul",
							"value": "Cara Menjaga Berat Badan Ideal",
							"type": "text"
						},
						{
							"key": "user_id",
							"value": "1",
							"type": "text"
						},
						{
							"key": "isi",
							"value": "Menjaga berat badan ideal adalah langkah penting untuk mendukung kesehatan tubuh dan kualitas hidup. Berat badan yang ideal tidak hanya membantu Anda terlihat lebih baik, tetapi juga mengurangi risiko penyakit kronis seperti diabetes, hipertensi, dan penyakit jantung. Berikut adalah beberapa cara yang dapat Anda lakukan untuk menjaga berat badan ideal:\n\n1. Pola Makan Seimbang\n\nMenerapkan pola makan seimbang adalah kunci utama dalam menjaga berat badan ideal. Konsumsi makanan yang mengandung karbohidrat, protein, lemak sehat, vitamin, dan mineral secara proporsional. Hindari makanan olahan, tinggi gula, dan tinggi lemak jenuh. Contoh makanan sehat meliputi:\n\nSayuran dan buah-buahan segar\n\nSumber protein seperti ikan, ayam tanpa kulit, tahu, dan tempe\n\nLemak sehat dari kacang-kacangan, alpukat, dan minyak zaitun\n\nKarbohidrat kompleks seperti nasi merah, quinoa, dan oatmeal\n\n2. Mengatur Porsi Makan\n\nSelain jenis makanan, perhatikan pula porsi makan. Makan dalam porsi yang terlalu besar dapat menyebabkan penumpukan kalori berlebih yang sulit dibakar oleh tubuh. Gunakan piring kecil untuk membantu mengontrol porsi, dan makan secara perlahan untuk memberi waktu bagi otak mengenali rasa kenyang.\n\n3. Rutin Berolahraga\n\nOlahraga secara teratur sangat penting untuk menjaga berat badan ideal. Aktivitas fisik membantu membakar kalori, meningkatkan metabolisme, dan memperkuat otot. Beberapa jenis olahraga yang efektif meliputi:\n\nBerjalan kaki\n\nBerlari atau jogging\n\nBersepeda\n\nYoga atau pilates\n\nLatihan kekuatan seperti angkat beban\nUsahakan untuk berolahraga setidaknya 150 menit per minggu atau sekitar 30 menit sehari.\n\n4. Minum Air Putih yang Cukup\n\nAir putih membantu metabolisme tubuh dan mengurangi rasa lapar berlebih. Minumlah setidaknya 8 gelas air setiap hari atau lebih jika Anda banyak beraktivitas. Hindari minuman manis seperti soda atau jus dengan tambahan gula karena dapat meningkatkan asupan kalori secara signifikan.\n\n5. Tidur yang Cukup\n\nTidur yang cukup berkontribusi pada pengelolaan berat badan yang sehat. Kurang tidur dapat mengganggu hormon yang mengatur rasa lapar dan kenyang, sehingga meningkatkan risiko makan berlebihan. Pastikan Anda tidur selama 7-9 jam setiap malam untuk mendukung kesehatan secara keseluruhan.\n\n6. Kelola Stres\n\nStres yang berlebihan dapat memicu kebiasaan makan emosional yang sering kali berujung pada konsumsi makanan tidak sehat. Cobalah teknik relaksasi seperti meditasi, yoga, atau mendengarkan musik untuk mengelola stres.\n\n7. Pantau Berat Badan Secara Berkala\n\nMemantau berat badan secara berkala dapat membantu Anda mengetahui apakah berat badan tetap stabil. Jika terjadi peningkatan atau penurunan yang signifikan, Anda dapat segera mengambil langkah penyesuaian pada pola makan atau aktivitas fisik.\n\nKesimpulan\n\nMenjaga berat badan ideal memerlukan komitmen dan konsistensi dalam menjalani gaya hidup sehat. Dengan menerapkan pola makan seimbang, rutin berolahraga, cukup tidur, serta mengelola stres, Anda dapat mencapai dan mempertahankan berat badan yang ideal. Ingatlah bahwa setiap tubuh berbeda, jadi penting untuk menemukan cara yang paling sesuai dengan kebutuhan Anda. Jika perlu, konsultasikan dengan ahli gizi atau dokter untuk mendapatkan saran yang lebih spesifik.",
							"type": "text"
						},
						{
							"key": "category",
							"value": "ideal",
							"type": "text"
						},
						{
							"key": "foto",
							"type": "file",
							"src": "/C:/Users/kadav/OneDrive/Pictures/Nolder Logo.png"
						}
					]
				},
				"url": {
					"raw": "http://127.0.0.1:8000/api/artikel",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"api",
						"artikel"
					]
				},
				"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
			},
			"response": []
		},
		{
			"name": "Add Artikel",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful PUT request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://127.0.0.1:8000/api/artikel",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"api",
						"artikel"
					]
				},
				"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Update Artikel",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/info?id=1",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"info"
					],
					"query": [
						{
							"key": "id",
							"value": "1"
						}
					]
				},
				"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
			},
			"response": []
		},
		{
			"name": "Delete Artikel",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:8000/api/artikel/1",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"api",
						"artikel",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Resep",
			"request": {
				"method": "GET",
				"header": []
			},
			"response": []
		},
		{
			"name": "Add Resep",
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:8000/api/resep",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"api",
						"resep"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Request",
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "user_id",
							"value": "1",
							"type": "text"
						},
						{
							"key": "category",
							"value": "overweight",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://127.0.0.1:8000/api/resep/2",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"api",
						"resep",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Artikel Copy",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:8000/api/artikel/1",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"api",
						"artikel",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Request",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://127.0.0.1:8000/api/users",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Request",
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "triyatno",
							"type": "text"
						},
						{
							"key": "email",
							"value": "triyatno@gmail.com",
							"type": "text"
						},
						{
							"key": "password",
							"value": "triyatno1234",
							"type": "text"
						},
						{
							"key": "no_hp",
							"value": "04874494979",
							"type": "text"
						},
						{
							"key": "jenis_kelamin",
							"value": "laki-laki",
							"type": "text"
						},
						{
							"key": "foto",
							"type": "file",
							"src": "/C:/Users/kadav/Downloads/Desain tanpa judul.jpg"
						}
					]
				},
				"url": {
					"raw": "http://127.0.0.1:8000/api/users",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Request Copy",
			"protocolProfileBehavior": {
				"disabledSystemHeaders": {
					"accept": true
				}
			},
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "triyatno",
							"type": "text"
						},
						{
							"key": "email",
							"value": "triyatno@gmail.com",
							"type": "text"
						},
						{
							"key": "password",
							"value": "triyatno1234",
							"type": "text"
						},
						{
							"key": "no_hp",
							"value": "04874494979",
							"type": "text"
						},
						{
							"key": "jenis_kelamin",
							"value": "laki-laki",
							"type": "text"
						},
						{
							"key": "foto",
							"type": "file",
							"src": "/C:/Users/kadav/Downloads/Desain tanpa judul.jpg"
						}
					]
				},
				"url": {
					"raw": "http://127.0.0.1:8000/api/users",
					"protocol": "http",
					"host": [
						"127",
						"0",
						"0",
						"1"
					],
					"port": "8000",
					"path": [
						"api",
						"users"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}